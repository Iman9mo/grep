// src-electron/electron-preload.js
var import_electron = require("electron");
var channels = ["execMain", "result"];
var exposeIpcRenderer = () => {
  import_electron.contextBridge.exposeInMainWorld("ipcRenderer", {
    send: (channel, data) => {
      if (channels.includes(channel)) {
        import_electron.ipcRenderer.send(channel, data);
      }
    },
    receive: (channel, func) => {
      if (channels.includes(channel)) {
        import_electron.ipcRenderer.on(channel, (event, ...args) => func(...args));
      }
    }
  });
};
exposeIpcRenderer();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjLWVsZWN0cm9uL2VsZWN0cm9uLXByZWxvYWQuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxyXG4gKiBUaGlzIGZpbGUgaXMgdXNlZCBzcGVjaWZpY2FsbHkgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXHJcbiAqIEhlcmUgeW91IGNhbiBhY2Nlc3MgTm9kZWpzIHN0dWZmIGFuZCBpbmplY3QgZnVuY3Rpb25hbGl0eSBpbnRvXHJcbiAqIHRoZSByZW5kZXJlciB0aHJlYWQgKGFjY2Vzc2libGUgdGhlcmUgdGhyb3VnaCB0aGUgXCJ3aW5kb3dcIiBvYmplY3QpXHJcbiAqXHJcbiAqIFdBUk5JTkchXHJcbiAqIElmIHlvdSBpbXBvcnQgYW55dGhpbmcgZnJvbSBub2RlX21vZHVsZXMsIHRoZW4gbWFrZSBzdXJlIHRoYXQgdGhlIHBhY2thZ2UgaXMgc3BlY2lmaWVkXHJcbiAqIGluIHBhY2thZ2UuanNvbiA+IGRlcGVuZGVuY2llcyBhbmQgTk9UIGluIGRldkRlcGVuZGVuY2llc1xyXG4gKlxyXG4gKiBFeGFtcGxlIChpbmplY3RzIHdpbmRvdy5teUFQSS5kb0FUaGluZygpIGludG8gcmVuZGVyZXIgdGhyZWFkKTpcclxuICpcclxuICogICBpbXBvcnQgeyBjb250ZXh0QnJpZGdlIH0gZnJvbSAnZWxlY3Ryb24nXHJcbiAqXHJcbiAqICAgY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnbXlBUEknLCB7XHJcbiAqICAgICBkb0FUaGluZzogKCkgPT4ge31cclxuICogICB9KVxyXG4gKlxyXG4gKiBXQVJOSU5HIVxyXG4gKiBJZiBhY2Nlc3NpbmcgTm9kZSBmdW5jdGlvbmFsaXR5IChsaWtlIGltcG9ydGluZyBAZWxlY3Ryb24vcmVtb3RlKSB0aGVuIGluIHlvdXJcclxuICogZWxlY3Ryb24tbWFpbi5qcyB5b3Ugd2lsbCBuZWVkIHRvIHNldCB0aGUgZm9sbG93aW5nIHdoZW4geW91IGluc3RhbnRpYXRlIEJyb3dzZXJXaW5kb3c6XHJcbiAqXHJcbiAqIG1haW5XaW5kb3cgPSBuZXcgQnJvd3NlcldpbmRvdyh7XHJcbiAqICAgLy8gLi4uXHJcbiAqICAgd2ViUHJlZmVyZW5jZXM6IHtcclxuICogICAgIC8vIC4uLlxyXG4gKiAgICAgc2FuZGJveDogZmFsc2UgLy8gPC0tIHRvIGJlIGFibGUgdG8gaW1wb3J0IEBlbGVjdHJvbi9yZW1vdGUgaW4gcHJlbG9hZCBzY3JpcHRcclxuICogICB9XHJcbiAqIH1cclxuICovXHJcblxyXG5pbXBvcnQgeyBjb250ZXh0QnJpZGdlLCBpcGNSZW5kZXJlciB9IGZyb20gXCJlbGVjdHJvblwiO1xyXG5cclxuY29uc3QgY2hhbm5lbHMgPSBbXCJleGVjTWFpblwiLCBcInJlc3VsdFwiXTtcclxuXHJcbmNvbnN0IGV4cG9zZUlwY1JlbmRlcmVyID0gKCkgPT4ge1xyXG4gIGNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoXCJpcGNSZW5kZXJlclwiLCB7XHJcbiAgICBzZW5kOiAoY2hhbm5lbCwgZGF0YSkgPT4ge1xyXG4gICAgICBpZiAoY2hhbm5lbHMuaW5jbHVkZXMoY2hhbm5lbCkpIHtcclxuICAgICAgICBpcGNSZW5kZXJlci5zZW5kKGNoYW5uZWwsIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVjZWl2ZTogKGNoYW5uZWwsIGZ1bmMpID0+IHtcclxuICAgICAgaWYgKGNoYW5uZWxzLmluY2x1ZGVzKGNoYW5uZWwpKSB7XHJcbiAgICAgICAgaXBjUmVuZGVyZXIub24oY2hhbm5lbCwgKGV2ZW50LCAuLi5hcmdzKSA9PiBmdW5jKC4uLmFyZ3MpKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9zZUlwY1JlbmRlcmVyKCk7XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUE4QkEsc0JBQTJDO0FBRTNDLElBQU0sV0FBVyxDQUFDLFlBQVksUUFBUTtBQUV0QyxJQUFNLG9CQUFvQixNQUFNO0FBQzlCLGdDQUFjLGtCQUFrQixlQUFlO0FBQUEsSUFDN0MsTUFBTSxDQUFDLFNBQVMsU0FBUztBQUN2QixVQUFJLFNBQVMsU0FBUyxPQUFPLEdBQUc7QUFDOUIsb0NBQVksS0FBSyxTQUFTLElBQUk7QUFBQSxNQUNoQztBQUFBLElBQ0Y7QUFBQSxJQUNBLFNBQVMsQ0FBQyxTQUFTLFNBQVM7QUFDMUIsVUFBSSxTQUFTLFNBQVMsT0FBTyxHQUFHO0FBQzlCLG9DQUFZLEdBQUcsU0FBUyxDQUFDLFVBQVUsU0FBUyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQUEsTUFDM0Q7QUFBQSxJQUNGO0FBQUEsRUFDRixDQUFDO0FBQ0g7QUFFQSxrQkFBa0I7IiwKICAibmFtZXMiOiBbXQp9Cg==
